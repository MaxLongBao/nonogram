{"version":3,"sources":["components/FirstScreen/index.js","components/Cell/index.js","components/Grid/index.js","components/Switch/index.js","App.js","reportWebVitals.js","index.js"],"names":["FirstScreen","props","handleDifficulty","className","onClick","e","Cell","value","filled","lockCell","handleMistakes","handleMouseDown","handleMouseUp","clicked","useState","cellStyle","setCellStyle","locked","setLocked","gameLogic","backgroundColor","onMouseDown","onMouseUp","onMouseEnter","style","Grid","matrix","rows","columns","callEndGame","setClicked","lockedCell","setLockedCell","blueSquares","setBlueSquares","useEffect","counter","forEach","array","item","blueSquaresCount","console","log","grid","map","row","content","rowsData","singleValue","v","columnsData","Switch","squareStyle","toggleStyle","handleSwitch","justifyContent","App","setMatrix","setFilled","mistakes","setMistakes","setRows","setColumns","difficulty","setDifficulty","start","setStart","length","fullOrEmpty","i","cell","j","randomElement","Math","floor","random","push","generateMatrix","rowsArray","rowsArrayGroup","number","findRows","columnsArray","columnsArrayGroup","findColumns","outcome","target","innerText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1dd47393.chunk.js","sourcesContent":["import React from 'react';\n\nimport './style.css';\n\nconst FirstScreen = (props) => {\n\n  const { handleDifficulty } = props;\n\n  return (\n    <div className='difficulty-container' onClick={(e) => handleDifficulty(e)}>\n      <div>\n        <h1>Choose the difficulty:</h1>\n      </div>\n      <div className='difficulty-select'>\n        <div className='difficulty'>Easy</div>\n        <div className='difficulty'>Medium</div>\n      </div>\n    </div>\n  )\n}\n\nexport default FirstScreen;","import React, { useState } from 'react';\nimport './styled.css';\n\nconst Cell = (props) => {\n\n  const {\n    value,\n    filled,\n    lockCell,\n    handleMistakes,\n    handleMouseDown,\n    handleMouseUp,\n    clicked\n  } = props;\n\n  const [cellStyle, setCellStyle] = useState(null);\n  const [locked, setLocked] = useState(false);\n\n  const gameLogic = () => {\n    if (!locked) {\n      if (filled === true) {\n        if (value === 'o') {\n          setCellStyle({\n            backgroundColor: 'blue',\n          })\n          setLocked(true)\n          lockCell()\n        } else {\n          handleMouseUp();\n          handleMistakes();\n        }\n      } else {\n        if (value === 'x') {\n          setCellStyle({\n            backgroundColor: 'red'\n          })\n          setLocked(true)\n        } else {\n          handleMouseUp();\n          handleMistakes();\n        }\n      }\n    }\n  }\n\n  const handleClick = () => {\n    gameLogic();\n    handleMouseDown();\n  }\n\n  const handleEnter = () => {\n    if (clicked) {\n      gameLogic();\n    }\n  }\n\n  return (\n    <div\n      className='cell' \n      onMouseDown={handleClick}\n      onMouseUp={handleMouseUp}\n      onMouseEnter={handleEnter}\n      style={cellStyle} \n    >\n      {value}\n    </div>\n  );\n};\n\nexport default Cell;","import React, { useState, useEffect } from 'react';\nimport Cell from '../Cell';\nimport './styled.css';\n\nconst Grid = (props) => {\n\n  const {\n    matrix,\n    rows,\n    columns,\n    filled,\n    handleMistakes,\n    callEndGame\n  } = props;\n\n  const [clicked, setClicked] = useState(false);\n  const [lockedCell, setLockedCell] = useState(0);\n  const [blueSquares, setBlueSquares] = useState(null);\n  \n  const blueSquaresCount = () => {\n    let counter = 0;\n    rows.forEach((array) => {\n      array.forEach((item) => {\n        counter += item;\n      })\n    })\n    setBlueSquares(counter)\n  }\n\n  useEffect(() => {\n    blueSquaresCount()\n  }, [rows]);\n\n  useEffect(() => {\n    console.log(lockedCell)\n    if (lockedCell === blueSquares) {\n      callEndGame('win');\n    }\n  }, [lockedCell])\n  \n  const handleMouseDown = () => {\n    setClicked(true);\n  }\n\n  const handleMouseUp = () => {\n    setClicked(false);\n  }\n\n\n\n  const lockCell = () => {\n    setLockedCell(lockedCell + 1);\n  }\n\n  const grid = matrix.map((row) => {\n    let content = row.map((value) => {\n      return (\n        // unique key to fix\n        <Cell \n          value={value}\n          filled={filled}\n          lockCell={lockCell}\n          handleMistakes={handleMistakes}\n          handleMouseDown={handleMouseDown}\n          handleMouseUp={handleMouseUp}\n          clicked={clicked}\n        />\n      );\n    })\n    return (\n      <div className='row'>{content}</div>\n    )\n  })\n\n  const rowsData = rows.map((value) => {\n    let singleValue = value.map((v) => {\n      return (\n        <div className='single-value-row'>{v}</div>\n      );\n    })\n    return (\n      <div className='row-data'>{singleValue}</div>\n    )\n  })\n\n  const columnsData = columns.map((value) => {\n    let singleValue = value.map((v) => {\n      return (\n        <div>{v}</div>\n        );\n      })\n    return (\n      <div className='column-data'>{singleValue}</div>\n    )\n  })\n\n  return (\n    <div>\n      <div className='columns'>{columnsData}</div>\n      <div className='grid'>\n        <div className='rows'>{rowsData}</div>\n        <div>{grid}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Grid;","import React from 'react';\nimport './styled.css';\n\nconst Switch = (props) => {\n\n  const { handleSwitch, filled } = props;\n\n  let squareStyle;\n  let toggleStyle;\n\n  if (filled) {\n    squareStyle = {\n      backgroundColor: 'blue'\n    }\n    toggleStyle = {\n      justifyContent: 'flex-end'\n    }\n  } else {\n    squareStyle = {\n      backgroundColor: 'red'\n    }\n    toggleStyle = {\n      justifyContent: 'flex-start'\n    }\n  }\n\n  return (\n    <div className='switch' style={toggleStyle} onClick={handleSwitch}>\n      <div className='toggle'>\n        <div className='square' style={squareStyle}>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Switch;","import React, { useState, useEffect } from 'react';\nimport FirstScreen from './components/FirstScreen';\nimport Grid from './components/Grid';\nimport Switch from './components/Switch';\nimport './App.css';\nimport EndGame from './components/EndGame';\n\nfunction App() {\n\n  const generateMatrix = (length) => {\n    const fullOrEmpty = ['x', 'o'];\n    const grid = [];\n\n    for (let i = 0; i < length; i++) {\n      const cell = [];\n      for (let j = 0; j < length; j++) {\n        const randomElement = fullOrEmpty[Math.floor(Math.random() * fullOrEmpty.length)];\n        cell.push(randomElement);\n      }\n      grid.push(cell);\n    }\n    return grid;\n  }\n\n  const findRows = (array, length) => {\n    if (array) {\n      const rowsArray = [];\n      for (let i = 0; i < length; i++) {\n        const rowsArrayGroup = [];\n        let number = 0;\n        for (let j = 0; j < length; j++) {\n          if (array[i][j] === 'o') {\n            number++;\n            if (j === (length - 1)) {\n              rowsArrayGroup.push(number)\n              number = 0\n            }\n          } else if (array[i][j] === 'x' || j === (9)) {\n            if (number > 0) {\n              rowsArrayGroup.push(number);\n              number = 0\n            }\n          }\n        }\n        rowsArray.push(rowsArrayGroup);\n      }\n      return rowsArray;\n    }\n    return\n  }\n\n  const findColumns = (array, length) => {\n    if (array) {\n      const columnsArray = [];\n      for (let i = 0; i < length; i++) {\n        const columnsArrayGroup = [];\n        let number = 0;\n        for (let j = 0; j < length; j++) {\n          if (array[j][i] === 'o') {\n            number++\n            if (j === (length - 1)) {\n              columnsArrayGroup.push(number)\n              number = 0\n            }\n          } else if (array[j][i] === 'x' || j === (9)) {\n            if (number > 0) {\n              columnsArrayGroup.push(number);\n              number = 0\n            }\n          }\n        }\n        columnsArray.push(columnsArrayGroup);\n      }\n      return columnsArray;\n    }\n    return\n  }\n\n  const [matrix, setMatrix] = useState(null);\n  const [filled, setFilled] = useState(true);\n  const [mistakes, setMistakes] = useState(3);\n  const [rows, setRows] = useState(null);\n  const [columns, setColumns] = useState(null);\n  const [difficulty, setDifficulty] = useState(null);\n  const [start, setStart] = useState(false);\n\n  useEffect(() => {\n    setMatrix(generateMatrix(difficulty))\n  }, [difficulty])\n  \n  useEffect(() => {\n      setRows(findRows(matrix, difficulty))\n      setColumns(findColumns(matrix, difficulty))\n  }, [matrix])\n\n  useEffect(() => {\n    console.log(mistakes)\n    if (mistakes < 1) {\n      callEndGame('lose');\n    }\n}, [mistakes])\n\n  const handleSwitch = () => {\n    if (filled === true) {\n      setFilled(false)\n    } else {\n      setFilled(true);\n    }\n  }\n\n  const callEndGame = (outcome) => {\n    if (outcome === 'win') {\n      console.log('win')\n    } else {\n      console.log('lose')\n    }\n  }\n\n  const handleMistakes = () => {\n    setMistakes(mistakes - 1);\n  }\n\n  const handleDifficulty = (e) => {\n    switch (e.target.innerText) {\n      case 'Easy':\n        setDifficulty(5);\n        setStart(true)\n        break;\n\n      case 'Medium':\n        setDifficulty(10)\n        setStart(true)\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      { matrix && rows && columns && start\n        ? <div>\n            <Grid matrix={matrix} rows={rows} columns={columns} filled={filled} handleMistakes={handleMistakes} callEndGame={callEndGame} />\n            <Switch handleSwitch={handleSwitch} filled={filled} />\n            <div>Mistakes = {mistakes}</div>\n          </div>\n      : <FirstScreen handleDifficulty={handleDifficulty} />\n       }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}