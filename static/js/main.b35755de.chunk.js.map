{"version":3,"sources":["components/Cell/index.js","components/Grid/index.js","components/Switch/index.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","value","filled","handleMistakes","handleMouseDown","handleMouseUp","clicked","useState","cellStyle","setCellStyle","locked","setLocked","gameLogic","backgroundColor","className","onMouseDown","onMouseUp","onMouseEnter","style","Grid","matrix","rows","columns","setClicked","grid","map","row","content","console","log","rowsData","singleValue","v","columnsData","Switch","squareStyle","toggleStyle","handleSwitch","justifyContent","onClick","App","setMatrix","setFilled","mistakes","setMistakes","setRows","setColumns","useEffect","length","fullOrEmpty","i","cell","j","randomElement","Math","floor","random","push","generateMatrix","array","rowsArray","rowsArrayGroup","number","findRows","columnsArray","columnsArrayGroup","findColumns","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAmEeA,EAhEF,SAACC,GAAW,IAGrBC,EAMED,EANFC,MACAC,EAKEF,EALFE,OACAC,EAIEH,EAJFG,eACAC,EAGEJ,EAHFI,gBACAC,EAEEL,EAFFK,cACAC,EACEN,EADFM,QARoB,EAWYC,mBAAS,MAXrB,mBAWfC,EAXe,KAWJC,EAXI,OAYMF,oBAAS,GAZf,mBAYfG,EAZe,KAYPC,EAZO,KAchBC,EAAY,WACXF,KACY,IAAXR,EACY,MAAVD,GACFQ,EAAa,CACXI,gBAAiB,SAEnBF,GAAU,KAEVN,IACAF,KAGY,MAAVF,GACFQ,EAAa,CACXI,gBAAiB,QAEnBF,GAAU,KAEVN,IACAF,OAiBR,OACE,qBACEW,UAAU,OACVC,YAdgB,WAClBH,IACAR,KAaEY,UAAWX,EACXY,aAXgB,WACdX,GACFM,KAUAM,MAAOV,KCgBEW,G,MAxEF,SAACnB,GAAW,IAGrBoB,EAKEpB,EALFoB,OACAC,EAIErB,EAJFqB,KACAC,EAGEtB,EAHFsB,QACApB,EAEEF,EAFFE,OACAC,EACEH,EADFG,eAPoB,EAUQI,oBAAS,GAVjB,mBAUfD,EAVe,KAUNiB,EAVM,KAYhBnB,EAAkB,WACtBmB,GAAW,IAGPlB,EAAgB,WACpBkB,GAAW,IAGPC,EAAOJ,EAAOK,KAAI,SAACC,GACvB,IAAIC,EAAUD,EAAID,KAAI,SAACxB,GACrB,OAEE,aADA,CACC,EAAD,CACEA,MAAOA,EACPC,OAAQA,EACRC,eAAgBA,EAChBC,gBAAiBA,EACjBC,cAAeA,EACfC,QAASA,OAIf,OACE,qBAAKQ,UAAU,MAAf,SAAsBa,OAG5BC,QAAQC,IAAIvB,GACV,IAAMwB,EAAWT,EAAKI,KAAI,SAACxB,GACzB,IAAI8B,EAAc9B,EAAMwB,KAAI,SAACO,GAC3B,OACE,qBAAKlB,UAAU,mBAAf,SAAmCkB,OAGvC,OACE,qBAAKlB,UAAU,WAAf,SAA2BiB,OAIzBE,EAAcX,EAAQG,KAAI,SAACxB,GAC/B,IAAI8B,EAAc9B,EAAMwB,KAAI,SAACO,GAC3B,OACE,8BAAMA,OAGV,OACE,qBAAKlB,UAAU,cAAf,SAA8BiB,OAIlC,OACE,gCACE,qBAAKjB,UAAU,UAAf,SAA0BmB,IAC1B,sBAAKnB,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBgB,IACvB,8BAAMN,YClCCU,G,MAjCA,SAAClC,GAAW,IAIrBmC,EACAC,EAHIC,EAAyBrC,EAAzBqC,aAqBR,OArBiCrC,EAAXE,QAMpBiC,EAAc,CACZtB,gBAAiB,QAEnBuB,EAAc,CACZE,eAAgB,cAGlBH,EAAc,CACZtB,gBAAiB,OAEnBuB,EAAc,CACZE,eAAgB,eAKlB,qBAAKxB,UAAU,SAASI,MAAOkB,EAAaG,QAASF,EAArD,SACE,qBAAKvB,UAAU,SAAf,SACE,qBAAKA,UAAU,SAASI,MAAOiB,U,MCqFxBK,MA7Gf,WAEE,IAFa,EAuEejC,mBAAS,MAvExB,mBAuENa,EAvEM,KAuEEqB,EAvEF,OAwEelC,oBAAS,GAxExB,mBAwENL,EAxEM,KAwEEwC,EAxEF,OAyEmBnC,mBAAS,GAzE5B,mBAyENoC,EAzEM,KAyEIC,EAzEJ,OA0EWrC,mBAAS,MA1EpB,mBA0ENc,EA1EM,KA0EAwB,EA1EA,OA2EiBtC,mBAAS,MA3E1B,mBA2ENe,EA3EM,KA2EGwB,EA3EH,KAkGb,OArBAC,qBAAU,WACRN,EA5EqB,SAACO,GAItB,IAHA,IAAMC,EAAc,CAAC,IAAK,KACpBzB,EAAO,GAEJ0B,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAE/B,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC/B,IAAMC,EAAgBJ,EAAYK,KAAKC,MAAMD,KAAKE,SAAWP,EAAYD,SACzEG,EAAKM,KAAKJ,GAEZ7B,EAAKiC,KAAKN,GAEZ,OAAO3B,EAgEGkC,CAAe,OACxB,IAEHX,qBAAU,WACNF,EAjEa,SAACc,EAAOX,GACvB,GAAIW,EAAO,CAET,IADA,IAAMC,EAAY,GACTV,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAG/B,IAFA,IAAMW,EAAiB,GACnBC,EAAS,EACJV,EAAI,EAAGA,EAAIJ,EAAQI,IACN,MAAhBO,EAAMT,GAAGE,IACXU,IACW,IAAPV,IACFS,EAAeJ,KAAKK,GACpBA,EAAS,IAEc,MAAhBH,EAAMT,GAAGE,IAAqB,IAAPA,GAC5BU,EAAS,IACXD,EAAeJ,KAAKK,GACpBA,EAAS,GAIfF,EAAUH,KAAKI,GAEjB,OAAOD,GA2CCG,CAAS3C,EAAQ,KACzB0B,EAvCgB,SAACa,EAAOX,GAC1B,GAAIW,EAAO,CAET,IADA,IAAMK,EAAe,GACZd,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAG/B,IAFA,IAAMe,EAAoB,GACtBH,EAAS,EACJV,EAAI,EAAGA,EAAIJ,EAAQI,IACN,MAAhBO,EAAMP,GAAGF,IACXY,IACW,IAAPV,IACFa,EAAkBR,KAAKK,GACvBA,EAAS,IAEc,MAAhBH,EAAMP,GAAGF,IAAqB,IAAPE,GAC5BU,EAAS,IACXG,EAAkBR,KAAKK,GACvBA,EAAS,GAIfE,EAAaP,KAAKQ,GAEpB,OAAOD,GAiBIE,CAAY9C,EAAQ,OAChC,CAACA,IAeF,sBAAKN,UAAU,MAAf,UACIM,GAAUC,GAAQC,EAClB,cAAC,EAAD,CAAMF,OAAQA,EAAQC,KAAMA,EAAMC,QAASA,EAASpB,OAAQA,EAAQC,eAPnD,WACrByC,EAAYD,EAAW,MAOnB,KACF,cAAC,EAAD,CAAQN,aAjBS,WAEjBK,GADa,IAAXxC,IAgBkCA,OAAQA,IAC5C,8CAAiByC,SCjGRwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b35755de.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './styled.css';\n\nconst Cell = (props) => {\n\n  const {\n    value,\n    filled,\n    handleMistakes,\n    handleMouseDown,\n    handleMouseUp,\n    clicked\n  } = props;\n\n  const [cellStyle, setCellStyle] = useState(null);\n  const [locked, setLocked] = useState(false);\n\n  const gameLogic = () => {\n    if (!locked) {\n      if (filled === true) {\n        if (value === 'o') {\n          setCellStyle({\n            backgroundColor: 'blue',\n          })\n          setLocked(true)\n        } else {\n          handleMouseUp();\n          handleMistakes();\n        }\n      } else {\n        if (value === 'x') {\n          setCellStyle({\n            backgroundColor: 'red'\n          })\n          setLocked(true)\n        } else {\n          handleMouseUp();\n          handleMistakes();\n        }\n      }\n    }\n  }\n\n  const handleClick = () => {\n    gameLogic();\n    handleMouseDown();\n  }\n\n  const handleEnter = () => {\n    if (clicked) {\n      gameLogic();\n    }\n  }\n\n  return (\n    <div\n      className='cell' \n      onMouseDown={handleClick}\n      onMouseUp={handleMouseUp}\n      onMouseEnter={handleEnter}\n      style={cellStyle} \n    >\n      {/* {value} */}\n    </div>\n  );\n};\n\nexport default Cell;","import React, { useState } from 'react';\nimport Cell from '../Cell';\nimport './styled.css';\n\nconst Grid = (props) => {\n\n  const {\n    matrix,\n    rows,\n    columns,\n    filled,\n    handleMistakes\n  } = props;\n\n  const [clicked, setClicked] = useState(false);\n\n  const handleMouseDown = () => {\n    setClicked(true);\n  }\n\n  const handleMouseUp = () => {\n    setClicked(false);\n  }\n  \n  const grid = matrix.map((row) => {\n    let content = row.map((value) => {\n      return (\n        // unique key to fix\n        <Cell \n          value={value}\n          filled={filled}\n          handleMistakes={handleMistakes}\n          handleMouseDown={handleMouseDown}\n          handleMouseUp={handleMouseUp}\n          clicked={clicked}\n        />\n      );\n    })\n    return (\n      <div className='row'>{content}</div>\n    )\n  })\nconsole.log(clicked)\n  const rowsData = rows.map((value) => {\n    let singleValue = value.map((v) => {\n      return (\n        <div className='single-value-row'>{v}</div>\n      );\n    })\n    return (\n      <div className='row-data'>{singleValue}</div>\n    )\n  })\n\n  const columnsData = columns.map((value) => {\n    let singleValue = value.map((v) => {\n      return (\n        <div>{v}</div>\n        );\n      })\n    return (\n      <div className='column-data'>{singleValue}</div>\n    )\n  })\n\n  return (\n    <div>\n      <div className='columns'>{columnsData}</div>\n      <div className='grid'>\n        <div className='rows'>{rowsData}</div>\n        <div>{grid}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Grid;","import React from 'react';\nimport './styled.css';\n\nconst Switch = (props) => {\n\n  const { handleSwitch, filled } = props;\n\n  let squareStyle;\n  let toggleStyle;\n\n  if (filled) {\n    squareStyle = {\n      backgroundColor: 'blue'\n    }\n    toggleStyle = {\n      justifyContent: 'flex-end'\n    }\n  } else {\n    squareStyle = {\n      backgroundColor: 'red'\n    }\n    toggleStyle = {\n      justifyContent: 'flex-start'\n    }\n  }\n\n  return (\n    <div className='switch' style={toggleStyle} onClick={handleSwitch}>\n      <div className='toggle'>\n        <div className='square' style={squareStyle}>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Switch;","import React, { useState, useEffect } from 'react';\nimport Grid from './components/Grid';\nimport Switch from './components/Switch';\nimport './App.css';\n\nfunction App() {\n\n  const generateMatrix = (length) => {\n    const fullOrEmpty = ['x', 'o'];\n    const grid = [];\n\n    for (let i = 0; i < length; i++) {\n      const cell = [];\n      for (let j = 0; j < length; j++) {\n        const randomElement = fullOrEmpty[Math.floor(Math.random() * fullOrEmpty.length)];\n        cell.push(randomElement);\n      }\n      grid.push(cell);\n    }\n    return grid;\n  }\n\n  const findRows = (array, length) => {\n    if (array) {\n      const rowsArray = [];\n      for (let i = 0; i < length; i++) {\n        const rowsArrayGroup = [];\n        let number = 0;\n        for (let j = 0; j < length; j++) {\n          if (array[i][j] === 'o') {\n            number++\n            if (j === (9)) {\n              rowsArrayGroup.push(number)\n              number = 0\n            }\n          } else if (array[i][j] === 'x' || j === (9)) {\n            if (number > 0) {\n              rowsArrayGroup.push(number);\n              number = 0\n            }\n          }\n        }\n        rowsArray.push(rowsArrayGroup);\n      }\n      return rowsArray;\n    }\n    return\n  }\n\n  const findColumns = (array, length) => {\n    if (array) {\n      const columnsArray = [];\n      for (let i = 0; i < length; i++) {\n        const columnsArrayGroup = [];\n        let number = 0;\n        for (let j = 0; j < length; j++) {\n          if (array[j][i] === 'o') {\n            number++\n            if (j === (9)) {\n              columnsArrayGroup.push(number)\n              number = 0\n            }\n          } else if (array[j][i] === 'x' || j === (9)) {\n            if (number > 0) {\n              columnsArrayGroup.push(number);\n              number = 0\n            }\n          }\n        }\n        columnsArray.push(columnsArrayGroup);\n      }\n      return columnsArray;\n    }\n    return\n  }\n\n  const [matrix, setMatrix] = useState(null);\n  const [filled, setFilled] = useState(true);\n  const [mistakes, setMistakes] = useState(0);\n  const [rows, setRows] = useState(null);\n  const [columns, setColumns] = useState(null);\n\n  useEffect(() => {\n    setMatrix(generateMatrix(10))\n  }, [])\n  \n  useEffect(() => {\n      setRows(findRows(matrix, 10))\n      setColumns(findColumns(matrix, 10))\n  }, [matrix])\n\n  const handleSwitch = () => {\n    if (filled === true) {\n      setFilled(false)\n    } else {\n      setFilled(true);\n    }\n  }\n\n  const handleMistakes = () => {\n    setMistakes(mistakes + 1);\n  }\n\n  return (\n    <div className=\"App\">\n      { matrix && rows && columns\n      ? <Grid matrix={matrix} rows={rows} columns={columns} filled={filled} handleMistakes={handleMistakes} />\n      : null }\n      <Switch handleSwitch={handleSwitch} filled={filled} />\n      <div>Mistakes = {mistakes}</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}