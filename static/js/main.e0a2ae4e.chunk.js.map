{"version":3,"sources":["components/Cell/index.js","components/Grid/index.js","components/Switch/index.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","value","filled","handleMistakes","useState","cellStyle","setCellStyle","className","onClick","backgroundColor","style","Grid","matrix","rows","columns","grid","map","row","content","rowsData","singleValue","v","columnsData","Switch","handleSwitch","App","setMatrix","setFilled","mistakes","setMistakes","setRows","setColumns","useEffect","length","fullOrEmpty","i","cell","j","randomElement","Math","floor","random","push","generateMatrix","array","rowsArray","rowsArrayGroup","number","findRows","columnsArray","columnsArrayGroup","findColumns","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAoCeA,EAjCF,SAACC,GAAW,IAEfC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,OAAQC,EAAmBH,EAAnBG,eAFD,EAIYC,mBAAS,MAJrB,mBAIfC,EAJe,KAIJC,EAJI,KA0BtB,OACE,qBAAKC,UAAU,OAAOC,QArBJ,YACH,IAAXN,EACY,MAAVD,EACFK,EAAa,CACXG,gBAAiB,SAGnBN,IAGY,MAAVF,EACFK,EAAa,CACXG,gBAAiB,QAGnBN,KAMwCO,MAAOL,KC6BxCM,G,MAvDF,SAACX,GAAW,IAGrBY,EAKEZ,EALFY,OACAC,EAIEb,EAJFa,KACAC,EAGEd,EAHFc,QACAZ,EAEEF,EAFFE,OACAC,EACEH,EADFG,eAGIY,EAAOH,EAAOI,KAAI,SAACC,GACvB,IAAIC,EAAUD,EAAID,KAAI,SAACf,GACrB,OAEE,aADA,CACC,EAAD,CAAMA,MAAOA,EAAOC,OAAQA,EAAQC,eAAgBA,OAGxD,OACE,qBAAKI,UAAU,MAAf,SAAsBW,OAIpBC,EAAWN,EAAKG,KAAI,SAACf,GACzB,IAAImB,EAAcnB,EAAMe,KAAI,SAACK,GAC3B,OACE,qBAAKd,UAAU,mBAAf,SAAmCc,OAGvC,OACE,qBAAKd,UAAU,UAAf,SAA0Ba,OAIxBE,EAAcR,EAAQE,KAAI,SAACf,GAC/B,IAAImB,EAAcnB,EAAMe,KAAI,SAACK,GAC3B,OACE,8BAAMA,OAGV,OACE,qBAAKd,UAAU,aAAf,SAA6Ba,OAIjC,OACE,gCACE,qBAAKb,UAAU,UAAf,SAA0Be,IAC1B,sBAAKf,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBY,IACvB,8BAAMJ,YCpCCQ,G,MAdA,SAACvB,GAAW,IAEjBwB,EAAyBxB,EAAzBwB,aAActB,EAAWF,EAAXE,OAEtB,OACE,qBAAKK,UAAU,SAAf,SACIL,EACA,qBAAKM,QAASgB,EAAd,eACA,qBAAKhB,QAASgB,EAAd,mB,MCuGOC,MA7Gf,WAEE,IAFa,EAuEerB,mBAAS,MAvExB,mBAuENQ,EAvEM,KAuEEc,EAvEF,OAwEetB,oBAAS,GAxExB,mBAwENF,EAxEM,KAwEEyB,EAxEF,OAyEmBvB,mBAAS,GAzE5B,mBAyENwB,EAzEM,KAyEIC,EAzEJ,OA0EWzB,mBAAS,MA1EpB,mBA0ENS,EA1EM,KA0EAiB,EA1EA,OA2EiB1B,mBAAS,MA3E1B,mBA2ENU,EA3EM,KA2EGiB,EA3EH,KAkGb,OArBAC,qBAAU,WACRN,EA5EqB,SAACO,GAItB,IAHA,IAAMC,EAAc,CAAC,IAAK,KACpBnB,EAAO,GAEJoB,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAE/B,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC/B,IAAMC,EAAgBJ,EAAYK,KAAKC,MAAMD,KAAKE,SAAWP,EAAYD,SACzEG,EAAKM,KAAKJ,GAEZvB,EAAK2B,KAAKN,GAEZ,OAAOrB,EAgEG4B,CAAe,MACxB,IAEHX,qBAAU,WACNF,EAjEa,SAACc,EAAOX,GACvB,GAAIW,EAAO,CAET,IADA,IAAMC,EAAY,GACTV,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAG/B,IAFA,IAAMW,EAAiB,GACnBC,EAAS,EACJV,EAAI,EAAGA,EAAIJ,EAAQI,IACN,MAAhBO,EAAMT,GAAGE,IACXU,IACW,IAAPV,IACFS,EAAeJ,KAAKK,GACpBA,EAAS,IAEc,MAAhBH,EAAMT,GAAGE,IAAqB,IAAPA,GAC5BU,EAAS,IACXD,EAAeJ,KAAKK,GACpBA,EAAS,GAIfF,EAAUH,KAAKI,GAEjB,OAAOD,GA2CCG,CAASpC,EAAQ,IACzBmB,EAvCgB,SAACa,EAAOX,GAC1B,GAAIW,EAAO,CAET,IADA,IAAMK,EAAe,GACZd,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAG/B,IAFA,IAAMe,EAAoB,GACtBH,EAAS,EACJV,EAAI,EAAGA,EAAIJ,EAAQI,IACN,MAAhBO,EAAMP,GAAGF,IACXY,IACW,IAAPV,IACFa,EAAkBR,KAAKK,GACvBA,EAAS,IAEc,MAAhBH,EAAMP,GAAGF,IAAqB,IAAPE,GAC5BU,EAAS,IACXG,EAAkBR,KAAKK,GACvBA,EAAS,GAIfE,EAAaP,KAAKQ,GAEpB,OAAOD,GAiBIE,CAAYvC,EAAQ,MAChC,CAACA,IAeF,sBAAKL,UAAU,MAAf,UACIK,GAAUC,GAAQC,EAClB,cAAC,EAAD,CAAMF,OAAQA,EAAQC,KAAMA,EAAMC,QAASA,EAASZ,OAAQA,EAAQC,eAPnD,WACrB0B,EAAYD,EAAW,MAOnB,KACF,cAAC,EAAD,CAAQJ,aAjBS,WAEjBG,GADa,IAAXzB,IAgBkCA,OAAQA,IAC5C,8CAAiB0B,SCjGRwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e0a2ae4e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './styled.css';\n\nconst Cell = (props) => {\n\n  const { value, filled, handleMistakes } = props;\n\n  const [cellStyle, setCellStyle] = useState(null);\n\n  const handleClick = () => {\n    if (filled === true) {\n      if (value === 'o') {\n        setCellStyle({\n          backgroundColor: 'blue',\n         })\n      } else {\n        handleMistakes();\n      }\n    } else {\n      if (value === 'x') {\n        setCellStyle({\n          backgroundColor: 'red'\n        })\n      } else {\n        handleMistakes();\n      }\n    }\n  }\n\n  return (\n    <div className='cell' onClick={handleClick} style={cellStyle} >\n      {/* {value} */}\n    </div>\n  );\n};\n\nexport default Cell;","import React from 'react';\nimport Cell from '../Cell';\nimport './styled.css';\n\nconst Grid = (props) => {\n\n  const {\n    matrix,\n    rows,\n    columns,\n    filled,\n    handleMistakes\n  } = props;\n  \n  const grid = matrix.map((row) => {\n    let content = row.map((value) => {\n      return (\n        // unique key to fix\n        <Cell value={value} filled={filled} handleMistakes={handleMistakes} />\n      );\n    })\n    return (\n      <div className='row'>{content}</div>\n    )\n  })\n\n  const rowsData = rows.map((value) => {\n    let singleValue = value.map((v) => {\n      return (\n        <div className='single-value-row'>{v}</div>\n      );\n    })\n    return (\n      <div className='rowData'>{singleValue}</div>\n    )\n  })\n\n  const columnsData = columns.map((value) => {\n    let singleValue = value.map((v) => {\n      return (\n        <div>{v}</div>\n        );\n      })\n    return (\n      <div className='columnData'>{singleValue}</div>\n    )\n  })\n\n  return (\n    <div>\n      <div className='columns'>{columnsData}</div>\n      <div className='grid'>\n        <div className='rows'>{rowsData}</div>\n        <div>{grid}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Grid;","import React from 'react';\nimport './styled.css';\n\nconst Switch = (props) => {\n\n  const { handleSwitch, filled } = props;\n\n  return (\n    <div className='switch'>\n      { filled\n      ? <div onClick={handleSwitch} >o</div>\n      : <div onClick={handleSwitch} >x</div>\n      }\n    </div>\n  );\n};\n\nexport default Switch;","import React, { useState, useEffect } from 'react';\nimport Grid from './components/Grid';\nimport Switch from './components/Switch';\nimport './App.css';\n\nfunction App() {\n\n  const generateMatrix = (length) => {\n    const fullOrEmpty = ['x', 'o'];\n    const grid = [];\n\n    for (let i = 0; i < length; i++) {\n      const cell = [];\n      for (let j = 0; j < length; j++) {\n        const randomElement = fullOrEmpty[Math.floor(Math.random() * fullOrEmpty.length)];\n        cell.push(randomElement);\n      }\n      grid.push(cell);\n    }\n    return grid;\n  }\n\n  const findRows = (array, length) => {\n    if (array) {\n      const rowsArray = [];\n      for (let i = 0; i < length; i++) {\n        const rowsArrayGroup = [];\n        let number = 0;\n        for (let j = 0; j < length; j++) {\n          if (array[i][j] === 'o') {\n            number++\n            if (j === (4)) {\n              rowsArrayGroup.push(number)\n              number = 0\n            }\n          } else if (array[i][j] === 'x' || j === (4)) {\n            if (number > 0) {\n              rowsArrayGroup.push(number);\n              number = 0\n            }\n          }\n        }\n        rowsArray.push(rowsArrayGroup);\n      }\n      return rowsArray;\n    }\n    return\n  }\n\n  const findColumns = (array, length) => {\n    if (array) {\n      const columnsArray = [];\n      for (let i = 0; i < length; i++) {\n        const columnsArrayGroup = [];\n        let number = 0;\n        for (let j = 0; j < length; j++) {\n          if (array[j][i] === 'o') {\n            number++\n            if (j === (4)) {\n              columnsArrayGroup.push(number)\n              number = 0\n            }\n          } else if (array[j][i] === 'x' || j === (4)) {\n            if (number > 0) {\n              columnsArrayGroup.push(number);\n              number = 0\n            }\n          }\n        }\n        columnsArray.push(columnsArrayGroup);\n      }\n      return columnsArray;\n    }\n    return\n  }\n\n  const [matrix, setMatrix] = useState(null);\n  const [filled, setFilled] = useState(true);\n  const [mistakes, setMistakes] = useState(0);\n  const [rows, setRows] = useState(null);\n  const [columns, setColumns] = useState(null);\n\n  useEffect(() => {\n    setMatrix(generateMatrix(5))\n  }, [])\n  \n  useEffect(() => {\n      setRows(findRows(matrix, 5))\n      setColumns(findColumns(matrix, 5))\n  }, [matrix])\n\n  const handleSwitch = () => {\n    if (filled === true) {\n      setFilled(false)\n    } else {\n      setFilled(true);\n    }\n  }\n\n  const handleMistakes = () => {\n    setMistakes(mistakes + 1);\n  }\n\n  return (\n    <div className=\"App\">\n      { matrix && rows && columns\n      ? <Grid matrix={matrix} rows={rows} columns={columns} filled={filled} handleMistakes={handleMistakes} />\n      : null }\n      <Switch handleSwitch={handleSwitch} filled={filled} />\n      <div>Mistakes = {mistakes}</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}